version: '3.8'  # Docker Compose file version

services:  # Define services section
  mongodb:  # MongoDB service
    build:  # Build configuration for MongoDB service
      context: ./Db  # the context from the db directory
      dockerfile: Dockerfile  # specified Dockerfile for mongodb
    container_name: db  # Set the container name to 'db'
    restart: always  # Always restart the container if it stops
    networks:  # Define networks for MongoDB service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for MongoDB service
      - "27017:27017"  # Map host port 27017 to container port 27017
    environment:  # Set environment variables for MongoDB service
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username  # Set MongoDB root username file path
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password  # Set MongoDB root password file path
    secrets:  # Attach secrets to MongoDB service
      - mongo_root_username  # Attach mongo_root_username secret
      - mongo_root_password  # Attach mongo_root_password secret
    volumes:  # Define volumes for MongoDB service
      - mongodb_data:/data/db  # Mount volume for MongoDB data storage
    healthcheck:  # Configure health check for MongoDB service
      test: ["CMD-SHELL", "mongosh --username $$(cat /run/secrets/mongo_root_username) --password $$(cat /run/secrets/mongo_root_password) --eval 'db.stats()'"]  # Health check command, escaping variable interpolation with $$
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks

  products:  # Products service
    build:  # Build configuration for Products service
      context: ./Products  # Use the context from the products directory
      dockerfile: Dockerfile  # specified Dockerfile for building image for products service
    container_name: products  # Set the container name to 'products'
    restart: always  # Always restart the container if it stops
    networks:  # Define networks for Products service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Products service
      - "3001:3001"  # Map host port 3001 to container port 3001
    depends_on:  # Specify dependency on MongoDB service
      - mongodb  # Depend on the MongoDB service
    healthcheck:  # Configure health check for Products service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3001 '"]  # Health check command with non-root user 
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp' for running container as a non-root user 

  frontend:  # Frontend service
    build:  # Build configuration for Frontend service
      context: ./Frontend  # Use the context from the frontend directory
      dockerfile: Dockerfile  # Use the specified Dockerfile
    container_name: frontend  # Set the container name to 'frontend'
    restart: always  # Always restart the container if it stops
    networks:  # Define networks for Frontend service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Frontend service
      - "80:80"  # Map host port 80 to container port 80
    healthcheck:  # Configure health check for Frontend service
      test: ["CMD-SHELL", "curl -f http://localhost/index.html && exit 0 || exit 1 "]  # Health check command 
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks

  cart:  # Cart service
    build:  # Build configuration for Cart service
      context: ./Cart  # Use the context from the cart directory
      dockerfile: Dockerfile  # Use the specified Dockerfile
    container_name: cart  # Set the container name to 'cart'
    restart: always  # Always restart the container if it stops
    networks:  # Define networks for Cart service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Cart service
      - "3002:3002"  # Map host port 3002 to container port 3002
    healthcheck:  # Configure health check for Cart service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3002 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

  orders:  # Orders service
    build:  # Build configuration for Orders service
      context: ./Orders  # Use the context from the orders directory
      dockerfile: Dockerfile  # Use the specified Dockerfile
    container_name: orders  # Set the container name to 'orders'
    restart: always  # Always restart the container if it stops
    networks:  # Define networks for Orders service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Orders service
      - "3003:3003"  # Map host port 3003 to container port 3003
    healthcheck:  # Configure health check for Orders service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3003 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

  gateway:  # Gateway service
    build:  # Build configuration for Gateway service
      context: ./Gateway  # Use the context from the gateway directory
      dockerfile: Dockerfile  # Use the specified Dockerfile
    container_name: gateway  # Set the container name to 'gateway'
    restart: always  # Always restart the container if it stops
    networks:  # Define networks for Gateway service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Gateway service
      - "3000:3000"  # Map host port 3000 to container port 3000
    healthcheck:  # Configure health check for Gateway service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3000 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

networks:  # Define networks section
  app_network:  # Define app_network network
     driver: bridge  # Use bridge network driver
     ipam:  # IP Address Management configuration for app_network
      driver: default  # Use default IPAM driver
      config:  # Configuration for IPAM
        - subnet: 172.19.0.0/24  # Specified subnet for the network

secrets:  # Define secrets section
  mongo_root_username:  # MongoDB root username secret
     file: ./Db/mongo_root_username.txt  # Specify the file containing the secret
  mongo_root_password:  # MongoDB root password secret
     file: ./Db/mongo_root_password.txt  # Specify the file containing the secret

volumes:  # Define volumes section
  mongodb_data:  # MongoDB data volume

