version: '3.8'  # Docker Compose file version

services:  # Define services section
  mongodb:  # MongoDB service
    image: dockerized-ecomapp-mongodb  # Use the specified Docker image for MongoDB
    deploy:  # Deploy configuration for MongoDB service
      replicas: 2  # Set the number of replicas to 2
      restart_policy:  # Define restart policy for MongoDB service
        condition: any  # Restart the container on any failure
    networks:  # Define networks for MongoDB service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for MongoDB service
      - "27017:27017"  # Map host port 27017 to container port 27017
    secrets:  # Attach secrets to MongoDB service
       - mongo_root_username  # Attach mongo_root_username secret
       - mongo_root_password  # Attach mongo_root_password secret
    volumes:  # Define volumes for MongoDB service
      - mongodb_data:/data/db  # Mount volume for MongoDB data storage
    healthcheck:  # Configure health check for MongoDB service
      test: ["CMD-SHELL", "mongosh --username $$(cat /run/secrets/mongo_root_username) --password $$(cat /run/secrets/mongo_root_password) --eval 'db.stats()'"]  # Health check command, escaping variable interpolation with $$
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks

  products:  # Products service
    image: dockerized-ecomapp-products  # Use the specified Docker image for Products service
    deploy:  # Deploy configuration for Products service
      replicas: 2  # Set the number of replicas to 2
      restart_policy:  # Define restart policy for Products service
        condition: any  # Restart the container on any failure
    networks:  # Define networks for Products service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Products service
      - "3001:3001"  # Map host port 3001 to container port 3001
    depends_on:  # Specify dependency on MongoDB service
      - mongodb  # Depend on the MongoDB service
    healthcheck:  # Configure health check for Products service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3001 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

  cart:  # Cart service
    image: dockerized-ecomapp-cart  # Use the specified Docker image for Cart service
    deploy:  # Deploy configuration for Cart service
      replicas: 2  # Set the number of replicas to 2
      restart_policy:  # Define restart policy for Cart service
        condition: any  # Restart the container on any failure
    networks:  # Define networks for Cart service
      - app_network  # Attach to the 'app_network' network
    ports:  # Expose ports for Cart service
      - "3002:3002"  # Map host port 3002 to container port 3002
    healthcheck:  # Configure health check for Cart service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3002 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

  orders:  # Orders service
    image: dockerized-ecomapp-orders  # Use the specified Docker image for Orders service
    deploy:  # Deploy configuration for Orders service
      replicas: 2  # Set the number of replicas to 2
      restart_policy:  # Define restart policy for Orders service
        condition: any  # Restart the container on any failure
    networks:  # Define networks for Orders service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Orders service
      - "3003:3003"  # Map host port 3003 to container port 3003
    healthcheck:  # Configure health check for Orders service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3003 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

  gateway:  # Gateway service
    image: dockerized-ecomapp-gateway  # Use the specified Docker image for Gateway service
    deploy:  # Deploy configuration for Gateway service
      replicas: 2  # Set the number of replicas to 2
      restart_policy:  # Define restart policy for Gateway service
        condition: any  # Restart the container on any failure
    networks:  # Define networks for Gateway service
      - app_network  # Attach to the 'app_network' network
    ports:  # Expose ports for Gateway service
      - "3000:3000"  # Map host port 3000 to container port 3000
    healthcheck:  # Configure health check for Gateway service
      test: ["CMD-SHELL", "netstat -tuln | grep ':3000 '"]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks
    user: temp  # Set the user to 'temp'

  frontend:  # Frontend service
    image: dockerized-ecomapp-frontend  # Use the specified Docker image for Frontend service
    deploy:  # Deploy configuration for Frontend service
      replicas: 2  # Set the number of replicas to 2
      restart_policy:  # Define restart policy for Frontend service
        condition: any  # Restart the container on any failure
    networks:  # Define networks for Frontend service
      app_network: {}  # Attach to the 'app_network' network
    ports:  # Expose ports for Frontend service
      - "80:80"  # Map host port 80 to container port 80
    healthcheck:  # Configure health check for Frontend service
      test: ["CMD-SHELL", "curl -f http://localhost/index.html && exit 0 || exit 1 "]  # Health check command
      interval: 30s  # Health check interval
      timeout: 10s  # Health check timeout
      retries: 3  # Number of retries for health check
      start_period: 10s  # Delay before starting health checks

networks:  # Define networks section
  app_network:  # Define app_network network
    driver: overlay  # Use overlay network driver
    ipam:  # IP Address Management configuration for app_network
      driver: default  # Use default IPAM driver
      config:  # Configuration for IPAM
         - subnet: 172.20.0.0/24  # Specify the subnet for the network

secrets:  # Define secrets section
  mongo_root_username:  # MongoDB root username secret
    external: true  # Use an externally defined secret
  mongo_root_password:  # MongoDB root password secret
    external: true  # Use an externally defined secret

volumes:  # Define volumes section
  mongodb_data:  # MongoDB data volume

